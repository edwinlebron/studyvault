Dentro de este documento se encuentran los apuntes del curso de Python.

--------------------Clase 3--------------------
Semántica vs Sintaxis.
Semántica: hace referencia al sentido que tiene el código.
Si estamos trabajando con operaciones matemáticas y la entrada de datos son números la salida debe ser números.
Sintaxis: Se refiere a la manera en que se escribe el código. La forma en que se siguen las reglas del lenguaje de programación.
Variables: Espacios en memoria para almacenar datos. 
El nombre de una variable no puede empezar con numeros.

Tipos de Datos:
Enteros (int): Números sin decimales.
Flotantes (float): Números con decimales.
Cadenas (str): Texto.
Booleanos (bool): True o False.

--------------------Clase 4--------------------
Las funciones para textos o cadenas en Python se llaman methods (metodos).
Ejemplo: print (_nombre_.upper())
Otros metodos:
.count(), para ver cuantas veces se repite un character dentro e una lista.
.capitalize()
.title() 
.swapcase() 
.replace(,) 
.split() 
.strip(), para eliminar espacios al principio y final de la cadena.
.lstrip() 
.rstrip() 
.find(), me permite saber en que posición se encuentra un caracter o una cadena de cartacter. Con este metodo si no se encuentra el caracter buscasdo devuelve un -1.
.index(): Con este metodo si no se encuentra el caracter buscasdo devuelve un error.
.len() para saber la longitud de una cadena
print (type(_nombre_)) "Para ser que tipo de dato tengo en una variable";
_variable='''Edwin lebron
valezuela''', para textos con saltos de linea.
.eval()	#Este y el siguiente son super métodos
.exec()

f-strings: print (f"Mi saludo preferido es {_saludo_.strip()},  mi nombre es {_nombre_} pero mi edad es {_edad_} anhos")
Las f-strings permiten insertar expresiones dentro de cadenas de texto.

#Imprimir en un formato especifico
_valor_=1500;
print (_valor_)
print("El valor de un juego en Nintendo Switch es: {:.4f}".format(_valor_))

#Saltos de Linea y colocar strint entre comillas en una cadena
print ("Hola Mundo,\nesto es genial")
print('El author de este documento es \'EDWIN LEBRON\'')

Indexación, es buscar por posición las palabras de una cadena de texto.

--------------------Clase 8--------------------
Orden de las operaciones matematicas (PEMDAS)
P -> Paréntesis
E -> Exponenciación
M -> Multiplicación
D -> División
A -> Adición
S -> Sustracción
EJEMPLO DE PEMDAS
operation_1  = 2 + 3 * 4
operation_2  = (2 + 3) * 4
print(operation_1)
print(operation_2)
operation_3 = (2+3) * (4**2)/ 8 - 1
print(operation_3)

--------------------Clase 9--------------------
Input(): Se usa para solicitar información al usuario.
Todo lo que se escribe en un input es un carácter por defecto.

int(Input()): Casting se usa para cuando deseamos convertir un carácter a numérico.

Listas en Python:
Para crear una lista se hace igual que una variable pero los valores van contenidos en [];
En una lista no se puede usar el metodo Find();
Para conocer el contendo de la lista:
1er elemento: [0]
2do elemento: [1]
ultimo elemento: [-1]
Si deseamos saber desde el 1er hasta el antepenultimo elemento [  :-1]
Si deseamos saber desde el 2do hasta el tras-antepenultimo elemento [  :-2]
.max() para buscar el elemento mas grande de la lista.
.min() para buscar el elemento mas pequeño de la lista.

Metodos para las listas:
.append: Agrega elementos, pero siempre lo agrega al final.
.insert(1,"El valor"): Podemos insertar valores a la lista en una posición especifico.

del nombre_lista [1] para eliminar elementos.
Si deseamos eliminar desde el 1er hasta el antepenultimo elemento [  :-1]
del nombre_lista: eliminar completamente la lista y no se puede usar.

#SLICE, GUARDAR EN ESPACIOS DE MEMORIA DIFERENTE.
a=[1,2,3,4,5];
b=a;
del a[0]
print(a)
print(b)
#Lo que elimino de una lista, se elimina en la otra.
#Solucion, consultar en que espacio de la memoria estoy guardando los datos.
#Si imprime el mismo ID, indica que estoy guardando en el mismo espacio en memoria.
print(id(a))
print(id(b))

#aplicar Slice:
c=a[:] #esto copia la lista desde la posicion 0 al final.
print(id(a))
print(id(b))
print(id(c)) #Ahora C guarda en otro espacio de la memoria. 
#agregamos un valor a la lista A para ver la diferencia al copiar y borrar.
a.append(7)

print(a)
print(b)
print(c) #A fue copia a C en un antes de agregar el 7 y como guardan en memoria diferente entonces solo tiene lo copiado hasta su tiempo.

--------------------Clase 14--------------------
Diccionarios: En python solo almacenan dos valores la clave y el valor.
Se crean igual una variable pero con {}.

Ejemplo:
numbers={1:"uno", 2:"dos", 3:"tres}
print(numbers)
eliminar el diccionario: del numbers;
Al igual que las listas tienen sus metodos.
Lo que esta antes de los dos puntos : entonces son las llaves.
Tambien puedo eliminar por llave:
del numers ["dos"];

Para pedirle las llaves:
clave=numbers.keys();
values=numbers.values();
Para imprimir los valores deparados en pares osea por familia, muy util para perfiles de acceso.
pais=numbers.items();

Ejercicio:
contacts = {"Carla": {"Apellido": "Florida",
               "Altura": 1.60,
               "Edad": 29},
                "Diego": {"Apellido": "Antezana",
               "Altura": 1.80,
               "Edad": 32}}
print(contacts["Carla"])

--------------------Clase 15--------------------
#Condicionales
#uso de if
print("Bienvenido a Piedas, Papel o Tijetas.\nEl Juego mas cabron del mundo.\nComenzemos!!!")
jugador1=input("Juegador 1: Que objeto elijes? ").lower();
jugador2=input("Juegador 2: Que objeto elijes? ").lower();
valore_perm=['piedra', 'papel', 'tijera'];

if jugador1 not in valore_perm or jugador2 not in valore_perm:
    print("Alguien esta insertando un valor erroneo, favor inserar los valores permitidos.\nRecuerda, los valores permitidos son Piedra, Papel o Rijera")
else:
    if (jugador1 =="papel" and jugador2=="piedra") or (jugador1=='tijeras' and jugador2=='papel') or (jugador1=='piedra' and jugador2=='tijera'):
        print("Gana juegador 1")
    elif jugador1==jugador2:
        print("Esto es un empate jejeje vuelvan a jugar")
    else:
        print("Gana Jugador 2");

--------------------Clase 16--------------------
#bucle for

numbers=[1,2,3,4,5];
#Si dedeso imprimir toda una lista de valores, puedo usar el ciclo FOR.
for i in numbers:
    print ("El valor de I es ",i+1);
print(type(i))

for k in range(1, 11):
    print (k)

celulares=["Samsung","Apple","Xiaomi","Pixel"];
for y in celulares:
    print (y)
    

#Cuando trabajamos con While, hay que indica con que inicia la varible.
x=0;
while x<=5:
    if x==3:
        break;#detiene la ejecucion del while.
    print(x)
    x+=1;


#caso 2,  y usando continue para hacer saltos en la ejecucion.
numbers=[1,2,3,4,5];
for i in numbers:
    if i== 4:
        break;
    print ("El valor de I es ",i);
   

numbers=[0,1,2,3,4,5];
for i in numbers:
    if i<=3:
        continue #permite saltar y continuar 
    print ("El valor de I es ",i);

--------------------Clase 17--------------------
#iteradores

#iter: Lo que hace es ir iterando cada uno de los elementos pero sin utilizar indices.
#lista:
mis_carros=[1, 2,3,4,5];

#crear el iterador:
my_iter=iter(mis_carros);

#usar el iterador
#hay que usar el metodo next();

print (next(my_iter))
print (next(my_iter))

#iterando sobre una cadena de textos
nombre="Edwin"
my_iter2=iter(nombre)
for i in my_iter2:
    print(i)

"""
Para los que les interesa saber por que escribio 1,limit+1,2 en la linea 7 de codigo, asi funciona la syntaxis:

# range(start, stop, step)

start: por donde empieza

stop: donde para limit+1 = 10

step: numero de posiciones que avanza
"""
#iterar sobre un rango de valores:
#Introduce dentro de 1 cada uno de los elementos del rango e imprimelo en cada una de tus iteraciones.

limite=13;
#limite=14;
for i in range(1,limite+1, 2):
    print('El valor del for es', i)


#GENERADORES.
#creando un generador
#imprimendo los numeros fibonacci

def my_generador():
    yield 1 # el Yield es por que en python no se usa la palabra return
    yield 2
    yield 3

for valor in my_generador():
    print(valor)


#imprimir los numeros fibonacci
def fibonacci(limite):
    a, b=0, 1
    while a < limite:
        yield 'el valor de a es', a
        yield 'el valor de b es', b
        a, b=b, a+b

for i in fibonacci(10):
    print(i)

    #0 1 1 2 3 5 8

Otra manera de hacerlo:
def cal(n):
    if n < 2:
        return n 
    else:
        for i in range(n):
   
            return cal(n-1) + cal(n-2)


for i in range(0,10):
    print(cal(i))


--------------------Clase 18--------------------
Funcion: Permite guardar logicas con tareas en especificas.
Evitamos duplicar codigo.
Se crea usando DEF Nombre_fun(parametro):


#FUNCIONES:
def salud_w():
    print("Hola Mundo")

def salud_2(name, apellido=""):
    print ("Hola ", name)
salud_w()
salud_2("Edwin")

#Si en una funcion de agregan mas de un parametros entonces debemos asignar valores por defecto.
